liorgabbay, tomerm1
208197327, 314998808

Question 1 – Roles and Relationships of Classes in the Code:
A. Shell Class –
1) Role - This class is responsible for implementing the command-line interface for the AsciiArt algorithm.
It receives commands from the user, validates their correctness, and executes the algorithm accordingly.
2) Relationships:
   - The class utilizes instances of the AsciiArtAlgorithm class. Upon receiving a command to run the
    algorithm, Shell creates an instance of the algorithm with parameters such as image,
    resolution, and character set for execution.
   - The class uses instances of classes implementing the AsciiOutput interface.
    When Shell receives a command to run the algorithm, it uses an object implementing
    AsciiOutput to output the algorithm's result.
   - The class uses methods from the ImageUtils class to pre-process the image requested by the user.
   - The class uses all types of classes inheriting from the IllegalCommandException class
    to handle user input errors (details on these classes will be provided later).
   - The class uses the KeyboardInput class to receive input from the user.
   - The class contains an instance of the Image class to pass it to the algorithm.

B. AsciiArtAlgorithm Class –
1) Role - This class is responsible for implementing the AsciiArt algorithm.
2) Relationships:
   - The class uses methods from the ImageUtils class to divide the image into sub-images
    and calculate the brightness of each sub-image.
   - The class uses the SubImageCharMatcher class to match each sub-image to a suitable ASCII
    character in the given character set.
   - The class contains an instance of the Image class on which it performs pre-processing
    and algorithmic operations.

C. SubImageCharMatcher Class –
1) Role - This class is responsible for matching an ASCII character to a given sub-image with
    a specified brightness. It utilizes the Ascii Art algorithm to convert sub-images into characters.
2) Relationships:
   - The class uses the CharConverter class to decompose an ASCII character into a boolean array,
    which is then used to obtain the character's brightness.

D. ImageUtils Class –
1) Role - This class contains methods for image processing, with a focus on padding,
    dividing into sub-images, and convert pixels to shades of gray.
2) Relationships:
   - The class uses instances of the Image class on which the operations are performed.

E. IllegalCommandException Class –
1) Role - This class is used to create exceptions for invalid user input in the Shell class.
2) Relationships:
   - The class inherits from the Exception class.

F. InvalidResolutionBoundaryException Class –
1) This class is used to describe exceptions when the user tries to change the resolution beyond
    allowed limits.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

G. InvalidImageException Class –
1) Role - This class is used to describe exceptions when the image file sent to the
    program does not lead to a valid image.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

H. IllegalCommandNameException Class –
1) Role - This class is used to describe exceptions when the user enters an invalid command in Shell.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

I. IllegalRunAlgoritrhmException Class –
1) Role - This class is used to describe exceptions when the algorithm's execution is invalid,
     when the character set is empty.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

J. IllegalRemoveException Class –
1) Role - This class is used to describe exceptions when invalid parameters are received for
    the remove command.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

K. IllegalAddException Class –
1) Role - This class is used to describe exceptions when invalid parameters are received for
    the add command.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

L. IllegalOutputException Class –
1) Role - This class is used to describe exceptions when invalid parameters are received for
    the output command.
2) Relationships:
   - The class inherits from the IllegalCommandException class.

M. IllegalResolutionException Class –
1) Role - This class is used to describe exceptions when invalid parameters are received for
    the res command.
2) Relationships:
   - The class inherits from the IllegalCommandException class.




Question 2 – Java Data Structures Used in the Code:

A. In the Shell Class – Use of TreeSet<Character>:
   - Purpose: The TreeSet is used to store characters that the user wants to pass to the algorithm in Shell.
    Removal or addition of characters is performed on this data structure. When executing the algorithm,
    a valid copy of the character set is passed to the algorithm.
   - Considerations for choosing this data structure:
      - The data structure prevents duplicates of characters.
      - It allows sorted display of characters based on their ASCII values since it is implemented
        using a Red-Black Tree. Thus, when the command to print characters is received,
        the operation is performed in O(n), traversing all characters without the need for sorting.
      - Removal and addition of values are performed in O(log(n)) time.
        While there are data structures that can perform these operations more efficiently,
        the requirement for efficient sorting of characters when their display is required made us
        choose this data structure.

B. In the SubImageCharMatcher Class – Use of TreeMap<double, PriorityQueue<Character>>:
   - Purpose: The TreeMap is used to efficiently match a given brightness to a character.
    This is achieved by finding the closest brightness key in the tree in O(log(n)) time.
    Additionally, it uses a PriorityQueue of characters as values to store characters with
    identical brightness, and retrieval of the minimum ASCII character for a given brightness
    is performed in O(1).

C. In the SubImageCharMatcher Class – Use of Static Hash Table: HashMap<Character, Double>:
   - Purpose: This static hash table is used to cache brightness values for characters.
    When an instance of the class calculates the brightness of a given character,
    it enters the values into this table. Subsequent instances interested in obtaining the brightness
    for the same character can retrieve it directly from the table in constant time, approximately O(1).

D. In the SubImageCharMatcher Class – Use of HashTable: HashSet<Character>:
   - Purpose: This hash set is used to store the set of characters received from the algorithm.
    We chose a hash set to prevent duplicates, and operations like adding and removing characters
    from the set are performed in O(1) time, approximately.

These data structures have been chosen based on their efficiency for the specific operations required
in the respective classes, considering factors such as prevention of duplicates, efficient retrieval,
and sorting capabilities.



Question 3 - Exceptions handling:
To create and handle exceptions resulting from illegal user operations with the Shell class,
we initially created a parent class named IllegalCommandException that inherits from the Exception class.
Subclasses representing specific exceptions (see details in the answer to question 1) inherit from this
parent class. Therefore, each specific command's handling throws a corresponding exception,
and the exception is caught in the run function as an IllegalCommandException,
and it is handled accordingly based on the requirements.
Additionally, each exception class has its own custom message, and the use of the parent class in the run
method allows polymorphism and expression for any exception.
It's important to note that in the case of receiving an IOException in the Shell due to an error
in opening an image file, the exception is caught in the function that creates the image,
and the handling involves throwing an InvalidImageException, which is then caught in the run function.

Question 4 - Irrelevant

Question 5 - Irrelevant